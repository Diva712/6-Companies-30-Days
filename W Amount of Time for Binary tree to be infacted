You are given the root of a binary tree with unique values, and an integer start. At minute 0, an infection starts from the node with value start.

Each minute, a node becomes infected if:

The node is currently uninfected.
The node is adjacent to an infected node.
Return the number of minutes needed for the entire tree to be infected.

 

Example 1:


Input: root = [1,5,3,null,4,10,6,9,2], start = 3
Output: 4
Explanation: The following nodes are infected during:
- Minute 0: Node 3
- Minute 1: Nodes 1, 10 and 6
- Minute 2: Node 5
- Minute 3: Node 4
- Minute 4: Nodes 9 and 2
It takes 4 minutes for the whole tree to be infected so we return 4.
Example 2:


Input: root = [1], start = 1
Output: 0
Explanation: At minute 0, the only node in the tree is infected so we return 0.



Solution :

class Solution {
public:
    void make_graph(unordered_map<int,vector<int>>&adj , int parent , TreeNode*curr){

        if(curr == NULL){
            return;
        }

        if(parent!=-1){
            adj[curr->val].push_back(parent);
        }

        if(curr->left){
            adj[curr->val].push_back(curr->left->val);
        }

        if(curr->right){
            adj[curr->val].push_back(curr->right->val);
        }

        make_graph(adj , curr->val , curr->left);
        make_graph(adj , curr->val , curr->right);
    }
    int amountOfTime(TreeNode* root, int start) {
        
        unordered_map<int,vector<int>>adj;
        unordered_set<int>visited;

        make_graph(adj , -1 , root);
        queue<int>q;
        q.push(start);
        visited.insert(start);
        int minutes = 0;

        while(!q.empty()){

            int n = q.size();

            while(n--){

                int node  = q.front();
                q.pop();

                for(auto ngbr : adj[node]){

                    if(visited.find(ngbr)==visited.end()){
                        q.push(ngbr);
                        visited.insert(ngbr);
                    }
                }
            }
            minutes++;
        }
        return minutes -1;
    }
};
