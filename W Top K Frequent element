Given an array of strings words and an integer k, return the k most frequent strings.

Return the answer sorted by the frequency from highest to lowest. Sort the words with the same frequency by their lexicographical order.

 

Example 1:

Input: words = ["i","love","leetcode","i","love","coding"], k = 2
Output: ["i","love"]
Explanation: "i" and "love" are the two most frequent words.
Note that "i" comes before "love" due to a lower alphabetical order.
Example 2:

Input: words = ["the","day","is","sunny","the","the","the","sunny","is","is"], k = 4
Output: ["the","is","sunny","day"]
Explanation: "the", "is", "sunny" and "day" are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively.

Solution :
class Solution {
public:
    static bool comp (pair<int,string>&p1 , pair<int,string>&p2){
        if(p1.first == p2.first){
            return p1.second < p2.second;
        }
        return p1.first > p2.first;
    }
    vector<string> topKFrequent(vector<string>& words, int k) {
        unordered_map<string , int>mpp;
        for(int i=0; i<words.size(); i++){
            mpp[words[i]]++;
        }

        vector<pair<int,string>>vec;
        for(auto it : mpp){
            vec.push_back({it.second , it.first});
        }
        sort(vec.begin() , vec.end() , comp);
        vector<string>ans;
        for(int i=0; i<k; i++){
            string s = vec[i].second;
            ans.push_back(s);
        }
        return ans;
    }
};
