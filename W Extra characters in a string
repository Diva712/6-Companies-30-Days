You are given a 0-indexed string s and a dictionary of words dictionary. You have to break s into one or more non-overlapping substrings such that each substring is present in dictionary. There may be some extra characters in s which are not present in any of the substrings.

Return the minimum number of extra characters left over if you break up s optimally.

 

Example 1:

Input: s = "leetscode", dictionary = ["leet","code","leetcode"]
Output: 1
Explanation: We can break s in two substrings: "leet" from index 0 to 3 and "code" from index 5 to 8. There is only 1 unused character (at index 4), so we return 1.

Example 2:

Input: s = "sayhelloworld", dictionary = ["hello","world"]
Output: 3
Explanation: We can break s in two substrings: "hello" from index 3 to 7 and "world" from index 8 to 12. The characters at indices 0, 1, 2 are not used in any substring and thus are considered as extra characters. Hence, we return 3.


Points: 
1. just think about each character and each length of substring.
2. use recursive approach.

Solution :

class Solution {
public:
    unordered_set<string>st;
    int n;
    int solve(int ind , string &s , vector<int>&dp){

        if(ind>=n){
            return 0;
        }

        if(dp[ind]!=-1){
            return dp[ind];
        }

        string curr_str = "";
        int extra = INT_MAX;

        for(int i=ind; i<n; i++){

            curr_str.push_back(s[i]);
            int curr_extra;
            if(st.find(curr_str) == st.end()){
                curr_extra = curr_str.length();
            }
            else{
                curr_extra = 0;
            }

            int remain_extra = solve(i+1 , s , dp);

            int total_extra = curr_extra + remain_extra ;

            extra = min(extra , total_extra);
        }

        return dp[ind] = extra;
    }
    int minExtraChar(string s, vector<string>& dictionary) {
        n = s.size();
        vector<int>dp(n+1,-1);

        for(int i=0; i<dictionary.size(); i++){
            st.insert(dictionary[i]);
        }

        return solve(0 , s , dp);
    }
};
