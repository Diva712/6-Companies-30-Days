Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]


Points:
observe bcktracking solution and think about it;

Solution:
class Solution {
public:
    void solve (int ind , string &digits , string &temp , unordered_map<char , string>&mpp , vector<string>&ans){
        if(ind >= digits.size()){
            ans.push_back(temp);
            return;
        }

        char ch = digits[ind];
        string str = mpp[ch];

        for(int i=0; i<str.size(); i++){

            temp.push_back(str[i]);
            solve(ind+1 , digits , temp , mpp , ans);
            temp.pop_back();
        }

    }
    vector<string> letterCombinations(string digits) {
        if(digits.size() == 0){

            return {};
        }
        unordered_map<char , string>mpp;
        string temp = "";
        vector<string>ans;
        mpp['2'] = "abc";
        mpp['3'] = "def";
        mpp['4'] = "ghi";
        mpp['5'] = "jkl";
        mpp['6'] = "mno";
        mpp['7'] = "pqrs";
        mpp['8'] = "tuv";
        mpp['9'] = "wxyz";

        solve(0 , digits , temp , mpp , ans);
        return ans;
    }
};
