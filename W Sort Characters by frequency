Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.

Return the sorted string. If there are multiple answers, return any of them.

 

Example 1:

Input: s = "tree"
Output: "eert"
Explanation: 'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input: s = "cccaaa"
Output: "aaaccc"
Explanation: Both 'c' and 'a' appear three times, so both "cccaaa" and "aaaccc" are valid answers.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:

Input: s = "Aabb"
Output: "bbAa"
Explanation: "bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.


Solution:

class Solution {
public:
    //static bool comp(char a)
    string frequencySort(string s) {

        // Method --1


        /*map<char , int>mpp;
        for(int i=0; i<s.size(); i++){
            mpp[s[i]]++;
        }

        vector<pair<char,int>>vec;
        for(auto it : mpp){
            vec.push_back(it);
        }

        sort(vec.begin() , vec.end() , comp);
        string ans = "";
        for(int i=0; i<vec.size(); i++){

            int frq = vec[i].second;
            while(frq--){
                ans = ans + vec[i].first;
                //frq--;
            }
        }

        return ans;*/

        // Method -- 2;

        unordered_map<char,int>mpp;
        for(int i=0; i<s.size(); i++){
            mpp[s[i]]++;
        }

        sort(s.begin() , s.end() , [&](char a , char b){

            if(mpp[a] == mpp[b]){
                return a<b;
            }
            return mpp[a] > mpp[b];
        });

        return s;


       
    }

};
