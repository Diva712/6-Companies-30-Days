Given two integer arrays nums1 and nums2, return the maximum length of a subarray that appears in both arrays.

 

Example 1:

Input: nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]
Output: 3
Explanation: The repeated subarray with maximum length is [3,2,1].
Example 2:

Input: nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0]
Output: 5
Explanation: The repeated subarray with maximum length is [0,0,0,0,0].


Point:
1. it is the variation of longest common substring which is the variation of longest common subsequences.

solution.
class Solution {
public:
// it is the variation of longest common substring.
    int solve(int i , int j , vector<int>&num1 , vector<int>&num2 , vector<vector<int>>&dp){

        if(i==0 || j==0){
            return 0;
        }

        if(dp[i][j]!=-1){
            return dp[i][j];
        }

        if(num1[i-1] == num2[j-1]){
            return dp[i][j] = 1 + solve(i-1, j-1,num1,num2,dp);
        }

        return dp[i][j] =  max(solve(i-1 , j , num1 , num2,dp) , solve(i , j-1 , num1 , num2 ,dp));
    }
    int findLength(vector<int>& nums1, vector<int>& nums2) {
        int n = nums1.size();
        int m = nums2.size();
        vector<vector<int>>dp(n+1 , vector<int>(m+1 , 0));
        for(int i=0; i<n; i++){
            dp[i][0] = 0;
        }
        for(int j=0; j<m; j++){
            dp[0][j] = 0;
        }

        for(int i=1 ; i<=n; i++){
            for(int j=1 ; j<=m ; j++){
                     if(nums1[i-1] == nums2[j-1]){
                       dp[i][j] = 1 + dp[i-1][j-1];
                    }
                    else{
                        dp[i][j] = 0;
                    }
                   
            }
        }

        int ans = 0;
        for(int i=0; i<=n; i++){
            for(int j=0 ; j<=m ; j++){
                ans = max(ans , dp[i][j]);
            }
        }
        return ans;
        
    }
};
