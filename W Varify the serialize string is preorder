One way to serialize a binary tree is to use preorder traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as '#'.


For example, the above binary tree can be serialized to the string "9,3,4,#,#,1,#,#,2,#,6,#,#", where '#' represents a null node.

Given a string of comma-separated values preorder, return true if it is a correct preorder traversal serialization of a binary tree.

It is guaranteed that each comma-separated value in the string must be either an integer or a character '#' representing null pointer.

You may assume that the input format is always valid.

For example, it could never contain two consecutive commas, such as "1,,3".
Note: You are not allowed to reconstruct the tree.

 

Example 1:

Input: preorder = "9,3,4,#,#,1,#,#,2,#,6,#,#"
Output: true
Example 2:

Input: preorder = "1,#"
Output: false
Example 3:

Input: preorder = "9,#,#,1"
Output: false


Point :
1. seperate comma with string
2. store the elements in to the vector
3. when no is occur add to the stack , if # is coming then check top of stack if top of stop is # than pop two elements from the stack .
4. add # into the stack

if at last if stack size is 1 and top of stack is # than itis true otherwise false;



Solution:

class Solution {
public:
    bool isValidSerialization(string preorder) {
        vector<string>vec;
        preorder = preorder+',';
        int n = preorder.size();

        int i = 0;
        while(i<n){
            string p = "";
            while(preorder[i]!=','){
                p = p + preorder[i];
                i++;
            }
            vec.push_back(p);
            i++;
        }
        for(auto it: vec)
        {
            cout<<it<<" ";
        }
     stack<string>st;
        for(int i=0; i<vec.size(); i++){
            string str = vec[i];
            if(st.empty() || str!="#"){
                st.push(str);
            }
            else{
                while(!st.empty() && st.top()=="#"){
                    st.pop();
                    if(st.empty()){
                        return false;
                    }
                    else{
                        st.pop();
                    }
                }
                st.push(str);
            }
        }

        return (st.size()==1 && st.top()=="#");

       
    }
};
