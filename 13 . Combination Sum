Find all valid combinations of k numbers that sum up to n such that the following conditions are true:

Only numbers 1 through 9 are used.
Each number is used at most once.
Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.

 

Example 1:

Input: k = 3, n = 7
Output: [[1,2,4]]
Explanation:
1 + 2 + 4 = 7
There are no other valid combinations.


Point :
Remember why we take backtrack .
we have to find all possiable ways
teherfore we are using backtracking for other numbers.


solution:

class Solution {
public:
    void generate (int start ,int end , vector<vector<int>>&vec , vector<int>&d , int k, int n){
     if(n==0 && d.size()==k){
            vec.push_back(d);
            return;
     }
     if(n<0){
         return ;
     }
        for(int i = start ; i<=end ; i++){
            d.push_back(i);
            generate(i+1 , end , vec , d, k , n-i);
            d.pop_back();
        }
    }
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>>vec;
        vector<int>d;
        generate(1 , 9 , vec ,d , k , n);
        return vec;
    }
};
