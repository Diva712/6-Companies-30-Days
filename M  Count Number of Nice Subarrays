Given an array of integers nums and an integer k. A continuous subarray is called nice if there are k odd numbers on it.

Return the number of nice sub-arrays.

 

Example 1:

Input: nums = [1,1,2,1,1], k = 3
Output: 2
Explanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].
Example 2:

Input: nums = [2,4,6], k = 1
Output: 0
Explanation: There is no odd numbers in the array.
Example 3:

Input: nums = [2,2,2,1,2,2,1,2,2,2], k = 2
Output: 16


Solution:
class Solution {
public:
    // this ques ccan be convert into find the number of subarray with sum is equal to k by changing the odd number into 1 and even number into the 0
.the new problem will be very gnral problem of sliding window.
    // for solving the find the number of subarray with given sum k is that we have to use prefix sum map . we have to store the strore 
the prefix sum in to the map and check if sum-k is present into  the map or not. 
if it ispresent than we will add the frequency of that sum in to ans.
    int numberOfSubarrays(vector<int>& nums, int k) {
        
        int n = nums.size();
        for(int i=0; i<n; i++){
            if(nums[i]%2 == 0){
                nums[i] = 0;

            }
            else{

                nums[i] = 1;
            }
        }

        int ans = 0;
        int prefix = 0;
        unordered_map<int,int>mpp;
        for(int i=0; i<n; i++){
            mpp[prefix]++;
            int f = prefix - k;
            if(mpp.find(f)!=mpp.end()){
                ans = ans + mpp[f];
            }
            prefix = prefix + nums[i];
        }
        mpp[prefix]++;
        int f = prefix-k;
        if(mpp.find(f)!=mpp.end()){
            ans = ans + mpp[f];
        }
        return ans;
    }
};
